var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from "@angular/core";
let ParametersService = class ParametersService {
    constructor() {
        if (!this.paramsFiltered)
            this.paramsFiltered = new Map();
    }
    filterToUrl(parameter) {
        switch (parameter.behavior) {
            case 'checklist':
            case 'radiolist':
                this.filterToUrlChecboxlist(parameter);
                break;
            case 'onecheck':
                this.filterToUrlOnecheck(parameter);
                break;
            case 'input':
                this.filterToUrlInput(parameter);
                break;
            default:
                throw Error('Неизвестный тип параметра фильтра');
        }
        return this.getUrlObject();
    }
    filterToUrlChecboxlist(parameter) {
        let valuesSelected = parameter.values.filter(v => v.selected);
        if (valuesSelected.length) {
            let valuesFiltered = valuesSelected.map(v => v.url);
            let fake = {};
            fake[parameter.url] = valuesFiltered;
            this.paramsFiltered.set(parameter._id, fake);
        }
        else {
            this.paramsFiltered.delete(parameter._id);
        }
        return this.paramsFiltered;
    }
    filterToUrlOnecheck(parameter) {
        let valuesSelected = parameter.values[0].selected;
        let fake = {};
        fake[parameter.url] = valuesSelected ? parameter.values[0].url : 'net';
        this.paramsFiltered.set(parameter._id, fake);
    }
    filterToUrlInput(parameter) {
        let valuesSelected = !!parameter.from || !!parameter.to;
        if (valuesSelected) {
            let fake = {};
            let queryValues = [];
            if (parameter.from)
                queryValues.push(`from_${parameter.from}`);
            if (parameter.to)
                queryValues.push(`to_${parameter.to}`);
            if (queryValues.length)
                fake[parameter.url] = queryValues;
            this.paramsFiltered.set(parameter._id, fake);
        }
        else {
            this.paramsFiltered.delete(parameter._id);
        }
    }
    getUrlObject() {
        let values = this.paramsFiltered.values();
        let valuesArray = Array.from(values);
        return valuesArray.length ? Object.assign({}, ...valuesArray) : {};
    }
    mergeParamsWithFilter(parameters) {
        return parameters.map(parameter => {
        });
    }
    urlToParameter(parameter, queryParams) {
        switch (parameter.behavior) {
            case 'checklist':
            case 'radiolist':
            case 'onecheck':
                return this.urlToFilterChecboxlist(parameter, queryParams);
            case 'input':
                return this.urlToFilterInput(parameter, queryParams);
            default:
                throw Error('Неизвестный тип параметра фильтра');
        }
    }
    urlToFilterChecboxlist(parameter, queryParams) {
        parameter.values.forEach(v => {
            let t = Object.keys(queryParams).map(k => queryParams[k]);
            v.selected = t.includes(v.url);
        });
        return parameter;
    }
    urlToFilterInput(parameter, queryParams) {
        let fromRegexp = new RegExp(/from_(\d+)/), toRegexp = new RegExp(/to_(\d+)/), from = fromRegexp.exec(queryParams), to = toRegexp.exec(queryParams);
        if (from)
            parameter.from = from[1];
        if (to)
            parameter.to = to[1];
        return parameter;
    }
};
ParametersService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], ParametersService);
export { ParametersService };
//# sourceMappingURL=data:application/json;base64,