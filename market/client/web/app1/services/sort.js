import { Sort, SortingMode } from "../entities/sort";
export class SortingService {
    constructor() {
        this.sorts = [
            {
                name: 'по названию',
                field: 'name',
                mode: SortingMode.Asc,
                active: true
            },
            {
                name: 'по цене',
                field: 'price',
                mode: SortingMode.Desc,
                active: false
            }
        ];
    }
    getSorts() {
        return this.sorts;
    }
    getActive() {
        let actives = this.sorts.filter(s => s.active);
        if (actives && actives.length)
            return actives[0];
    }
    filterDefault(sort) {
        if (!(sort.field == 'name' && sort.mode == SortingMode.Asc))
            return sort;
    }
    getUrl() {
        return this.toUrl(this.filterDefault(this.getActive()));
    }
    getSearch() {
        let s = this.filterDefault(this.getActive());
        if (s) {
            let fake = {};
            fake[s.field] = s.mode;
            return fake;
        }
        return {};
    }
    change(activeSort) {
        let sort = this.fromUrl(activeSort);
        this.sorts.forEach(s => {
            if (s.field == sort.field) {
                s.active = true;
                s.mode = +sort.mode;
            }
            else {
                s.active = false;
            }
        });
        return this.sorts;
    }
    doSort(sort, mode) {
        this.sorts.forEach(s => {
            if (s.field == sort.field) {
                s.active = true;
                s.mode = mode;
            }
            else
                s.active = false;
        });
        return this.sorts;
    }
    toUrl(sort) {
        if (sort)
            return { sort: `${sort.field}_${sort.mode}` };
    }
    fromUrl(queryParam) {
        let sort = new Sort();
        let regexp = new RegExp(/(\w+)_(-?\d+)/), match = regexp.exec(queryParam);
        if (match) {
            sort.field = match[1];
            sort.mode = +match[2];
        }
        return sort;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUVuRCxNQUFNO0lBQU47UUFDWSxVQUFLLEdBQVc7WUFDcEI7Z0JBQ0ksSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLEtBQUssRUFBRSxNQUFNO2dCQUNiLElBQUksRUFBRSxXQUFXLENBQUMsR0FBRztnQkFDckIsTUFBTSxFQUFFLElBQUk7YUFDZjtZQUNEO2dCQUNJLElBQUksRUFBRSxTQUFTO2dCQUNmLEtBQUssRUFBRSxPQUFPO2dCQUNkLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSTtnQkFDdEIsTUFBTSxFQUFFLEtBQUs7YUFDaEI7U0FDSixDQUFDO0lBNkVOLENBQUM7SUEzRUcsUUFBUTtRQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBQ3JCLENBQUM7SUFFRCxTQUFTO1FBQ0wsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQyxFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUMxQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3pCLENBQUM7SUFFTyxhQUFhLENBQUMsSUFBVTtRQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUMzRCxDQUFDO0lBRUQsU0FBUztRQUNMLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDN0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNKLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxNQUFNLENBQUMsRUFBRSxDQUFBO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVO1FBQ2IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2dCQUNoQixDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN4QixDQUFDO1lBQ0QsSUFBSSxDQUFDLENBQUM7Z0JBQ0YsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDckIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFVLEVBQUUsSUFBaUI7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDaEIsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDbEIsQ0FBQztZQUNELElBQUk7Z0JBQ0EsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRU8sS0FBSyxDQUFDLElBQVU7UUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ0wsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sT0FBTyxDQUFDLFVBQVU7UUFDdEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUV0QixJQUFJLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFDcEMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNSLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTb3J0LCBTb3J0aW5nTW9kZX0gZnJvbSBcIi4uL2VudGl0aWVzL3NvcnRcIjtcblxuZXhwb3J0IGNsYXNzIFNvcnRpbmdTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHNvcnRzOiBTb3J0W10gPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICfQv9C+INC90LDQt9Cy0LDQvdC40Y4nLFxuICAgICAgICAgICAgZmllbGQ6ICduYW1lJyxcbiAgICAgICAgICAgIG1vZGU6IFNvcnRpbmdNb2RlLkFzYyxcbiAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAn0L/QviDRhtC10L3QtScsXG4gICAgICAgICAgICBmaWVsZDogJ3ByaWNlJyxcbiAgICAgICAgICAgIG1vZGU6IFNvcnRpbmdNb2RlLkRlc2MsXG4gICAgICAgICAgICBhY3RpdmU6IGZhbHNlXG4gICAgICAgIH1cbiAgICBdO1xuXG4gICAgZ2V0U29ydHMoKTogU29ydFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydHNcbiAgICB9XG5cbiAgICBnZXRBY3RpdmUoKTogU29ydCB7XG4gICAgICAgIGxldCBhY3RpdmVzID0gdGhpcy5zb3J0cy5maWx0ZXIocyA9PiBzLmFjdGl2ZSk7XG4gICAgICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZXNbMF1cbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbHRlckRlZmF1bHQoc29ydDogU29ydCkge1xuICAgICAgICBpZiAoIShzb3J0LmZpZWxkID09ICduYW1lJyAmJiBzb3J0Lm1vZGUgPT0gU29ydGluZ01vZGUuQXNjKSlcbiAgICAgICAgICAgIHJldHVybiBzb3J0O1xuICAgIH1cblxuICAgIGdldFVybCgpOiBvYmplY3Qge1xuICAgICAgICByZXR1cm4gdGhpcy50b1VybCh0aGlzLmZpbHRlckRlZmF1bHQodGhpcy5nZXRBY3RpdmUoKSkpXG4gICAgfVxuXG4gICAgZ2V0U2VhcmNoKCkge1xuICAgICAgICBsZXQgcyA9IHRoaXMuZmlsdGVyRGVmYXVsdCh0aGlzLmdldEFjdGl2ZSgpKTtcbiAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgIGxldCBmYWtlID0ge307XG4gICAgICAgICAgICBmYWtlW3MuZmllbGRdID0gcy5tb2RlO1xuICAgICAgICAgICAgcmV0dXJuIGZha2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge31cbiAgICB9XG5cbiAgICBjaGFuZ2UoYWN0aXZlU29ydCk6IFNvcnRbXSB7XG4gICAgICAgIGxldCBzb3J0ID0gdGhpcy5mcm9tVXJsKGFjdGl2ZVNvcnQpO1xuICAgICAgICB0aGlzLnNvcnRzLmZvckVhY2gocyA9PiB7XG4gICAgICAgICAgICBpZiAocy5maWVsZCA9PSBzb3J0LmZpZWxkKSB7XG4gICAgICAgICAgICAgICAgcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHMubW9kZSA9ICtzb3J0Lm1vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5zb3J0cztcbiAgICB9XG5cbiAgICBkb1NvcnQoc29ydDogU29ydCwgbW9kZTogU29ydGluZ01vZGUpOiBTb3J0W10ge1xuICAgICAgICB0aGlzLnNvcnRzLmZvckVhY2gocyA9PiB7XG4gICAgICAgICAgICBpZiAocy5maWVsZCA9PSBzb3J0LmZpZWxkKSB7XG4gICAgICAgICAgICAgICAgcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHMubW9kZSA9IG1vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcy5hY3RpdmUgPSBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b1VybChzb3J0OiBTb3J0KTogb2JqZWN0IHtcbiAgICAgICAgaWYgKHNvcnQpXG4gICAgICAgICAgICByZXR1cm4ge3NvcnQ6IGAke3NvcnQuZmllbGR9XyR7c29ydC5tb2RlfWB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZnJvbVVybChxdWVyeVBhcmFtKTogU29ydCB7XG4gICAgICAgIGxldCBzb3J0ID0gbmV3IFNvcnQoKTtcblxuICAgICAgICBsZXQgcmVnZXhwID0gbmV3IFJlZ0V4cCgvKFxcdyspXygtP1xcZCspLyksXG4gICAgICAgICAgICBtYXRjaCA9IHJlZ2V4cC5leGVjKHF1ZXJ5UGFyYW0pO1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgc29ydC5maWVsZCA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgc29ydC5tb2RlID0gK21hdGNoWzJdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNvcnQ7XG4gICAgfVxufSJdfQ==