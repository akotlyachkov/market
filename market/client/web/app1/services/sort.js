import { Sort, SortingMode } from "../models/sort";
export class SortingService {
    constructor() {
        this.sorts = [
            {
                name: 'по умолчанию',
                field: 'default',
                mode: 0,
                active: true
            },
            {
                name: 'по названию',
                field: 'name',
                mode: SortingMode.Asc,
                active: false
            },
            {
                name: 'по цене',
                field: 'price',
                mode: SortingMode.Desc,
                active: false
            }
        ];
    }
    getSorts() {
        return this.sorts;
    }
    getActive() {
        let actives = this.sorts.filter(s => s.active);
        if (actives && actives.length)
            return actives[0];
    }
    filterDefault(sort) {
        if (sort.field != 'default')
            return sort;
    }
    getUrl() {
        return this.toUrl(this.filterDefault(this.getActive()));
    }
    getSearch() {
        let s = this.filterDefault(this.getActive());
        if (s) {
            let fake = {};
            fake[s.field] = s.mode;
            return fake;
        }
        return {};
    }
    change(activeSort) {
        let sort = this.fromUrl(activeSort);
        this.sorts.forEach(s => {
            if (s.field == sort.field) {
                s.active = true;
                s.mode = +sort.mode;
            }
            else {
                s.active = false;
            }
        });
        return this.sorts;
    }
    doSort(sort, mode) {
        this.sorts.forEach(s => {
            if (s.field == sort.field) {
                s.active = true;
                s.mode = mode;
            }
            else
                s.active = false;
        });
        return this.sorts;
    }
    toUrl(sort) {
        if (sort)
            return { sort: `${sort.field}_${sort.mode}` };
    }
    fromUrl(queryParam) {
        let sort = new Sort();
        let regexp = new RegExp(/(\w+)_(-?\d+)/), match = regexp.exec(queryParam);
        if (match) {
            sort.field = match[1];
            sort.mode = +match[2];
        }
        return sort;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxNQUFNO0lBQU47UUFDWSxVQUFLLEdBQVc7WUFDcEI7Z0JBQ0ksSUFBSSxFQUFFLGNBQWM7Z0JBQ3BCLEtBQUssRUFBRSxTQUFTO2dCQUNoQixJQUFJLEVBQUUsQ0FBQztnQkFDUCxNQUFNLEVBQUUsSUFBSTthQUNmO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLEtBQUssRUFBRSxNQUFNO2dCQUNiLElBQUksRUFBRSxXQUFXLENBQUMsR0FBRztnQkFDckIsTUFBTSxFQUFFLEtBQUs7YUFDaEI7WUFDRDtnQkFDSSxJQUFJLEVBQUUsU0FBUztnQkFDZixLQUFLLEVBQUUsT0FBTztnQkFDZCxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUk7Z0JBQ3RCLE1BQU0sRUFBRSxLQUFLO2FBQ2hCO1NBQ0osQ0FBQztJQTZFTixDQUFDO0lBM0VHLFFBQVE7UUFDSixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNyQixDQUFDO0lBRUQsU0FBUztRQUNMLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0MsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDMUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6QixDQUFDO0lBRU8sYUFBYSxDQUFDLElBQVU7UUFDNUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUM7WUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUMzRCxDQUFDO0lBRUQsU0FBUztRQUNMLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDN0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNKLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxNQUFNLENBQUMsRUFBRSxDQUFBO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVO1FBQ2IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2dCQUNoQixDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN4QixDQUFDO1lBQ0QsSUFBSSxDQUFDLENBQUM7Z0JBQ0YsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDckIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFVLEVBQUUsSUFBaUI7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDaEIsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDbEIsQ0FBQztZQUNELElBQUk7Z0JBQ0EsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRU8sS0FBSyxDQUFDLElBQVU7UUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ0wsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sT0FBTyxDQUFDLFVBQVU7UUFDdEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUV0QixJQUFJLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFDcEMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNSLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTb3J0LCBTb3J0aW5nTW9kZX0gZnJvbSBcIi4uL21vZGVscy9zb3J0XCI7XG5cbmV4cG9ydCBjbGFzcyBTb3J0aW5nU2VydmljZSB7XG4gICAgcHJpdmF0ZSBzb3J0czogU29ydFtdID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAn0L/QviDRg9C80L7Qu9GH0LDQvdC40Y4nLFxuICAgICAgICAgICAgZmllbGQ6ICdkZWZhdWx0JyxcbiAgICAgICAgICAgIG1vZGU6IDAsXG4gICAgICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ9C/0L4g0L3QsNC30LLQsNC90LjRjicsXG4gICAgICAgICAgICBmaWVsZDogJ25hbWUnLFxuICAgICAgICAgICAgbW9kZTogU29ydGluZ01vZGUuQXNjLFxuICAgICAgICAgICAgYWN0aXZlOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAn0L/QviDRhtC10L3QtScsXG4gICAgICAgICAgICBmaWVsZDogJ3ByaWNlJyxcbiAgICAgICAgICAgIG1vZGU6IFNvcnRpbmdNb2RlLkRlc2MsXG4gICAgICAgICAgICBhY3RpdmU6IGZhbHNlXG4gICAgICAgIH1cbiAgICBdO1xuXG4gICAgZ2V0U29ydHMoKTogU29ydFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydHNcbiAgICB9XG5cbiAgICBnZXRBY3RpdmUoKTogU29ydCB7XG4gICAgICAgIGxldCBhY3RpdmVzID0gdGhpcy5zb3J0cy5maWx0ZXIocyA9PiBzLmFjdGl2ZSk7XG4gICAgICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZXNbMF1cbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbHRlckRlZmF1bHQoc29ydDogU29ydCkge1xuICAgICAgICBpZiAoc29ydC5maWVsZCAhPSAnZGVmYXVsdCcpXG4gICAgICAgICAgICByZXR1cm4gc29ydDtcbiAgICB9XG5cbiAgICBnZXRVcmwoKTogb2JqZWN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9VcmwodGhpcy5maWx0ZXJEZWZhdWx0KHRoaXMuZ2V0QWN0aXZlKCkpKVxuICAgIH1cblxuICAgIGdldFNlYXJjaCgpIHtcbiAgICAgICAgbGV0IHMgPSB0aGlzLmZpbHRlckRlZmF1bHQodGhpcy5nZXRBY3RpdmUoKSk7XG4gICAgICAgIGlmIChzKSB7XG4gICAgICAgICAgICBsZXQgZmFrZSA9IHt9O1xuICAgICAgICAgICAgZmFrZVtzLmZpZWxkXSA9IHMubW9kZTtcbiAgICAgICAgICAgIHJldHVybiBmYWtlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHt9XG4gICAgfVxuXG4gICAgY2hhbmdlKGFjdGl2ZVNvcnQpOiBTb3J0W10ge1xuICAgICAgICBsZXQgc29ydCA9IHRoaXMuZnJvbVVybChhY3RpdmVTb3J0KTtcbiAgICAgICAgdGhpcy5zb3J0cy5mb3JFYWNoKHMgPT4ge1xuICAgICAgICAgICAgaWYgKHMuZmllbGQgPT0gc29ydC5maWVsZCkge1xuICAgICAgICAgICAgICAgIHMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzLm1vZGUgPSArc29ydC5tb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydHM7XG4gICAgfVxuXG4gICAgZG9Tb3J0KHNvcnQ6IFNvcnQsIG1vZGU6IFNvcnRpbmdNb2RlKTogU29ydFtdIHtcbiAgICAgICAgdGhpcy5zb3J0cy5mb3JFYWNoKHMgPT4ge1xuICAgICAgICAgICAgaWYgKHMuZmllbGQgPT0gc29ydC5maWVsZCkge1xuICAgICAgICAgICAgICAgIHMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzLm1vZGUgPSBtb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHMuYWN0aXZlID0gZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRzO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9Vcmwoc29ydDogU29ydCk6IG9iamVjdCB7XG4gICAgICAgIGlmIChzb3J0KVxuICAgICAgICAgICAgcmV0dXJuIHtzb3J0OiBgJHtzb3J0LmZpZWxkfV8ke3NvcnQubW9kZX1gfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZyb21VcmwocXVlcnlQYXJhbSk6IFNvcnQge1xuICAgICAgICBsZXQgc29ydCA9IG5ldyBTb3J0KCk7XG5cbiAgICAgICAgbGV0IHJlZ2V4cCA9IG5ldyBSZWdFeHAoLyhcXHcrKV8oLT9cXGQrKS8pLFxuICAgICAgICAgICAgbWF0Y2ggPSByZWdleHAuZXhlYyhxdWVyeVBhcmFtKTtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHNvcnQuZmllbGQgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIHNvcnQubW9kZSA9ICttYXRjaFsyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzb3J0O1xuICAgIH1cbn0iXX0=