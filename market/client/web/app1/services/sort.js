import { Sort, SortingMode } from "../models/sort";
export class SortingService {
    constructor() {
        this.sorts = [
            {
                name: 'по умолчанию',
                field: 'default',
                mode: 0,
                active: true
            },
            {
                name: 'по названию',
                field: 'name',
                mode: SortingMode.Asc,
                active: false
            },
            {
                name: 'по цене',
                field: 'price',
                mode: SortingMode.Desc,
                active: false
            }
        ];
    }
    getSorts() {
        return this.sorts;
    }
    getActive() {
        let actives = this.sorts.filter(s => s.active);
        if (actives && actives.length)
            return actives[0];
    }
    filterDefault(sort) {
        if (sort.field != 'default')
            return sort;
    }
    getUrl() {
        return this.toUrl(this.filterDefault(this.getActive()));
    }
    getSearch() {
        let s = this.filterDefault(this.getActive());
        if (s) {
            let fake = {};
            fake[s.field] = s.mode;
            return fake;
        }
        return {};
    }
    change(activeSort) {
        let sort = this.fromUrl(activeSort);
        this.sorts.forEach(s => {
            if (s.field == sort.field) {
                s.active = true;
                s.mode = +sort.mode;
            }
            else {
                s.active = false;
            }
        });
        return this.sorts;
    }
    doSort(sort, mode) {
        this.sorts.forEach(s => {
            if (s.field == sort.field) {
                s.active = true;
                s.mode = mode;
            }
            else
                s.active = false;
        });
        return this.sorts;
    }
    toUrl(sort) {
        if (sort)
            return { sort: `${sort.field}_${sort.mode}` };
    }
    fromUrl(queryParam) {
        let sort = new Sort();
        let regexp = new RegExp(/(\w+)_(-?\d+)/), match = regexp.exec(queryParam);
        if (match) {
            sort.field = match[1];
            sort.mode = +match[2];
        }
        return sort;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxNQUFNO0lBQU47UUFDWSxVQUFLLEdBQVc7WUFDcEI7Z0JBQ0ksSUFBSSxFQUFFLGNBQWM7Z0JBQ3BCLEtBQUssRUFBRSxTQUFTO2dCQUNoQixJQUFJLEVBQUUsQ0FBQztnQkFDUCxNQUFNLEVBQUUsSUFBSTthQUNmO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLEtBQUssRUFBRSxNQUFNO2dCQUNiLElBQUksRUFBRSxXQUFXLENBQUMsR0FBRztnQkFDckIsTUFBTSxFQUFFLEtBQUs7YUFDaEI7WUFDRDtnQkFDSSxJQUFJLEVBQUUsU0FBUztnQkFDZixLQUFLLEVBQUUsT0FBTztnQkFDZCxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUk7Z0JBQ3RCLE1BQU0sRUFBRSxLQUFLO2FBQ2hCO1NBQ0osQ0FBQztJQTZFTixDQUFDO0lBM0VHLFFBQVE7UUFDSixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtJQUNyQixDQUFDO0lBRUQsU0FBUztRQUNMLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0MsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDMUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6QixDQUFDO0lBRU8sYUFBYSxDQUFDLElBQVU7UUFDNUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUM7WUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUMzRCxDQUFDO0lBRUQsU0FBUztRQUNMLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDN0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNKLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxNQUFNLENBQUMsRUFBRSxDQUFBO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVO1FBQ2IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2dCQUNoQixDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN4QixDQUFDO1lBQ0QsSUFBSSxDQUFDLENBQUM7Z0JBQ0YsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDckIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFVLEVBQUUsSUFBaUI7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDaEIsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDbEIsQ0FBQztZQUNELElBQUk7Z0JBQ0EsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUE7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRU8sS0FBSyxDQUFDLElBQVU7UUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ0wsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU8sT0FBTyxDQUFDLFVBQVU7UUFDdEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUV0QixJQUFJLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFDcEMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFcEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNSLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTb3J0LCBTb3J0aW5nTW9kZX0gZnJvbSBcIi4uL21vZGVscy9zb3J0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU29ydGluZ1NlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBzb3J0czogU29ydFtdID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ9C/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOJyxcclxuICAgICAgICAgICAgZmllbGQ6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICAgbW9kZTogMCxcclxuICAgICAgICAgICAgYWN0aXZlOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICfQv9C+INC90LDQt9Cy0LDQvdC40Y4nLFxyXG4gICAgICAgICAgICBmaWVsZDogJ25hbWUnLFxyXG4gICAgICAgICAgICBtb2RlOiBTb3J0aW5nTW9kZS5Bc2MsXHJcbiAgICAgICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ9C/0L4g0YbQtdC90LUnLFxyXG4gICAgICAgICAgICBmaWVsZDogJ3ByaWNlJyxcclxuICAgICAgICAgICAgbW9kZTogU29ydGluZ01vZGUuRGVzYyxcclxuICAgICAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgZ2V0U29ydHMoKTogU29ydFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb3J0c1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFjdGl2ZSgpOiBTb3J0IHtcclxuICAgICAgICBsZXQgYWN0aXZlcyA9IHRoaXMuc29ydHMuZmlsdGVyKHMgPT4gcy5hY3RpdmUpO1xyXG4gICAgICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlc1swXVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmlsdGVyRGVmYXVsdChzb3J0OiBTb3J0KSB7XHJcbiAgICAgICAgaWYgKHNvcnQuZmllbGQgIT0gJ2RlZmF1bHQnKVxyXG4gICAgICAgICAgICByZXR1cm4gc29ydDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVcmwoKTogb2JqZWN0IHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1VybCh0aGlzLmZpbHRlckRlZmF1bHQodGhpcy5nZXRBY3RpdmUoKSkpXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2VhcmNoKCkge1xyXG4gICAgICAgIGxldCBzID0gdGhpcy5maWx0ZXJEZWZhdWx0KHRoaXMuZ2V0QWN0aXZlKCkpO1xyXG4gICAgICAgIGlmIChzKSB7XHJcbiAgICAgICAgICAgIGxldCBmYWtlID0ge307XHJcbiAgICAgICAgICAgIGZha2Vbcy5maWVsZF0gPSBzLm1vZGU7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWtlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHt9XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlKGFjdGl2ZVNvcnQpOiBTb3J0W10ge1xyXG4gICAgICAgIGxldCBzb3J0ID0gdGhpcy5mcm9tVXJsKGFjdGl2ZVNvcnQpO1xyXG4gICAgICAgIHRoaXMuc29ydHMuZm9yRWFjaChzID0+IHtcclxuICAgICAgICAgICAgaWYgKHMuZmllbGQgPT0gc29ydC5maWVsZCkge1xyXG4gICAgICAgICAgICAgICAgcy5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcy5tb2RlID0gK3NvcnQubW9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHMuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydHM7XHJcbiAgICB9XHJcblxyXG4gICAgZG9Tb3J0KHNvcnQ6IFNvcnQsIG1vZGU6IFNvcnRpbmdNb2RlKTogU29ydFtdIHtcclxuICAgICAgICB0aGlzLnNvcnRzLmZvckVhY2gocyA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzLmZpZWxkID09IHNvcnQuZmllbGQpIHtcclxuICAgICAgICAgICAgICAgIHMuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHMubW9kZSA9IG1vZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcy5hY3RpdmUgPSBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdG9Vcmwoc29ydDogU29ydCk6IG9iamVjdCB7XHJcbiAgICAgICAgaWYgKHNvcnQpXHJcbiAgICAgICAgICAgIHJldHVybiB7c29ydDogYCR7c29ydC5maWVsZH1fJHtzb3J0Lm1vZGV9YH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmcm9tVXJsKHF1ZXJ5UGFyYW0pOiBTb3J0IHtcclxuICAgICAgICBsZXQgc29ydCA9IG5ldyBTb3J0KCk7XHJcblxyXG4gICAgICAgIGxldCByZWdleHAgPSBuZXcgUmVnRXhwKC8oXFx3KylfKC0/XFxkKykvKSxcclxuICAgICAgICAgICAgbWF0Y2ggPSByZWdleHAuZXhlYyhxdWVyeVBhcmFtKTtcclxuXHJcbiAgICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgICAgIHNvcnQuZmllbGQgPSBtYXRjaFsxXTtcclxuICAgICAgICAgICAgc29ydC5tb2RlID0gK21hdGNoWzJdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNvcnQ7XHJcbiAgICB9XHJcbn0iXX0=